from look_and_say import look_and_say
import unittest

class Test(unittest.TestCase):
	
	checks = [] 
	def assert_equals(a,b,message=None,checks=checks):
		print(a,b,sep="  ->  ")
		checks.append(["Fail","Pass"][a==b])
		print("\t",checks,"\n")

Test.assert_equals(look_and_say("13112221"), "1113213211")
Test.assert_equals(look_and_say("1113213211"), "31131211131221")
Test.assert_equals(look_and_say("31131211131221"), "13211311123113112211")
Test.assert_equals(look_and_say("13211311123113112211"), "11131221133112132113212221")
Test.assert_equals(look_and_say("11131221133112132113212221"), "3113112221232112111312211312113211")
Test.assert_equals(look_and_say("3113112221232112111312211312113211"), "1321132132111213122112311311222113111221131221")
Test.assert_equals(look_and_say("1321132132111213122112311311222113111221131221"), "11131221131211131231121113112221121321132132211331222113112211")
Test.assert_equals(look_and_say("11131221131211131231121113112221121321132132211331222113112211"), "311311222113111231131112132112311321322112111312211312111322212311322113212221")
Test.assert_equals(look_and_say("311311222113111231131112132112311321322112111312211312111322212311322113212221"), "132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211")
Test.assert_equals(look_and_say("132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"), "11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221")
