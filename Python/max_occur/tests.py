from max_occur import max_occur
import unittest

class Test(unittest.TestCase):
	
	checks = [] 
	def assert_equals(a,b,message=None,checks=checks):
		print(a,b,sep="  ->  ")
		checks.append(["Fail","Pass"][a==b])
		print("\t",checks,"\n")

Test.assert_equals(max_occur("Computer Science"), ['e'], "Wrong Answer")
Test.assert_equals(max_occur("Edabit"), "No Repetition", "Wrong Answer")
Test.assert_equals(max_occur("system admin"), ['m', 's'], "Wrong Answer")
Test.assert_equals(max_occur("the quick brown fox jumps over the lazy dog"), [' '], "Wrong Answer")
Test.assert_equals(max_occur("Computer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer Science"), ['e'], "Wrong Answer")
Test.assert_equals(max_occur("edabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearch"), ['e'], "Wrong Answer")
Test.assert_equals(max_occur("thequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydog"), ['o'], "Wrong Answer")
Test.assert_equals(max_occur("thequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydog"), ['o'], "Wrong Answer")
Test.assert_equals(max_occur("edabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearch"), ['e'], "Wrong Answer")
Test.assert_equals(max_occur("gedpeilckbponlhjfoakojkbkqgmlidojdfpiklcmceimijkcfgaagkedcqqlkbhligdgdkinmgoqbohlblkiboeafacphihmhgnpqpefgqoqqfgmnphoifbqkiqhobimjbidkgppghmgfhonidgjlpainhaefqlgljgqfehqdojeakfagqenjmnaanbeiipffbflqbhaqdoanicmccpbohfjifoajcbbjgklecjkffcnplfkplqaopaldjmjqpqjobldkclcfobqdflkfeacdmpoffhhecilgeqbbofffkkpidoachmnipmkdfmfkibhndpnidbpieneaapfjknnhmboonahlabhcblcbibeogepogkjonommonandpfqqfgkjacbmincqabeqlnjdaibgmihgdfahkmhncafpqjmabqpqaoeapalldfaddkjjmapmpqdfagbealmaeoooaeebkmldangbcqfnekbamqlmmbkfkgmijbfpddoobnhlacqmlkbhgjffhjdllgiecnggqlcqcpojncambneaalmddpjbjbhclnfplelcfmjqofgkqdgncbgdnckhcgidqfingkmcfnfaieonmkqjclbedqemolondqklmjmpjimqlkpgfhadhcmbbamplkbnblghijomepenimjipefaoadqgdfbdebgihofdkbealnkcjkqjpnjqjidqbllellnjqjglicgnkpemplfbcenmikalfalafmgbqifpcpgaiipaojboobidbkdfgqcglnjocgacdiligfgkdkjqfbhafchodmnefpflejaemkocphccldldnkhpahncqddqqakkemgqgqlopqiinqfmpneeophcpqginqnkjlngndongdkdqmdglkmbioicebkqfkncmkfakjmmilbbpclqnnkqcilfljjonpefmhenpiqidlcojnqbhcmijlpjeikejqnbqojoopdgfeihombjbnmibhhodmqcbfmneqkkkgnnqnpbgobaahlbkpnkieqpohngeqiimoqkebaiioaqdaqeemlaaobchnjoqojfgjacmkoneljncdifnmbmonolhbobbekmhkhqbbijjeimqninlpjnoicnhhnanpmqobkjbidokcpceealmqjceodfjepnfbfjpplmoofhofphlcjggnokgdbhhmhfbiiciqgqicoincnfbmkbpnqnlgdkknenpeejnnineeananofffmbmpqafdbddogblacchmmiellagacnicckocjmefihmhhahmkklapblcjqjjkjcnkqpiideblobeeopemljkiplkfelibjkilgfbjdaphlnlckcohjgcoaglfgcadoiipeqaeghceelbnjjqohqkcghmjqqfjjkmeqofdqjnjokkgcigpqkhbjeedipbbaekljhjakpgckepjlfeipagibhdknglnapkedkaljcgpeefmimeecfbgjpojepcpmnpcdnjgphmiogjapqhhgmfbecbmnffdoomdcoiamdejjiofqcqngbedohealndhejbkhpaeohkdjmnooefpeehgaddopkebliiqfmolmcepqhbkdjmihalmpeagfgemjklihlqloagpmponplidplgmabnebcpibjmjipjqcbppfaibmeldmfholijnpplialnkahmjblflfijkdbdiqnipfjfbhdgmlfpimpgallgkelhnkbepohdjamlklnkdnakghlenaaegojijlonnjlplkfmgifecigddqmimmjelnfjicjiqjcjfmajbmhgqjhnegnoiaebqkefjcobdjhlieipqbnmjkodmjqhpoljkmhbcenipnpjgdpjngjdaganqfqpbmfbcckneemfelhijihmdonioblediffncnfhkpqnckkkbhbqelfgdgpnaqlibklhgqqjiqjpiqhcikmjacilllhlbkkdqolefpceandqmdgkcdnjofjeghjanaqpmekdejjihlbojbgepddeljkpcekdnogcioniofqicdndbcijdmdmiddogcplejnbbjemcbfljfeqeqfmklbgppkkbmcjhnnokdckdqlbkfqjddbqphpblgoofhpbkpjohnlodkgopdlgfjmaddnfjlickjqdnboebhebmjahkijopakceoehkpoblhhndlbheifjdbaedaefbegaaiaqqhdjjkgkcnhmblnfmqdhopojqfpeoccpinapcnnnlqilkhdehcefhnlcagqdconnngfdkiggnninkcgqpdpimijkdhmpjmbagnbagplcanmdlglqmfglafnciekedlgghhnepbannkenmjkcddijgcfmhpjphlhgaiciinlhmdqqcfqeindgckcphllinandqbooeqqeeghnkijfjdbdilodjokjompakfmoqonhfedcoqmaqddfomnnhggibqgcjgoinjjnmhbflkepacibpidnkolphnqkboohkbmqcokmqqdjlkdpcnhgnaaafkledkbennaemqomnqakjkcqfbkkjfbcpnlcpgipbbdelnmaqqqmemfdlcjqcpkcomgjoimmfqoaeagieegnngbngpdldgbbdimjdibgagbajkbgaqfnkmkplidlfqlceccmcplenodbefqemoocomgfklhekqjlllcooejpijpmagalmefkpnpieahjjiqfkadjmiackjognnfafpdmgqedcnaapdnbkmqonnnbqdnbjpjjacnajfhigifnhopkahfojqkfeoiglkalipcndddeqlemqefdmchfkehnghmqlkkfanedebiqmhdknonaaaglfgqilncdpcodnqggdfibjqkacpoqcjiofflndqqigljqcmbjankjmpoqjjepehcflpogomfnpmqhqoodoohkbkepjdcnbmbacdqmqpcqqkiaejlkpfkjckkoboodgobddlcfjcjoekhbhpapjlkkojqdjqhqjipacpijjpfljhqmkfpeicgpbomndmfqnjaoalbjihgmimijolbleejkiolliimhacjdgpoidbbiihdhjjfhdpopjecgbpdagieephngeeadqgoijjmjphajilqfdlpqomngpeplffqapmmopifqhihgdpmqhobeibfmphamcmignhpapmdnkgapbhelgnkqfmqqgjacpbmkgofbfjohlmmelmnjpnglheaajhckfinbbhnggqpencidkoaepmglhdenhcmqbkfnndbgqmgfehnlqkifhpmpjfakgonfgjqnjifhmfdneacamknhpqcdjnfkiplhjqnkckqpkknjboaeqpdebhmfbkpcaamojehcqilpoeocajgoeqbgmkclmclpnqddmcqkppnqhglmcnlkfobmajgekhmbimnbcnlqohdceocfiblbfcajbqlpihmiabmednnegiccbggekeiolmedkfdadidadiaejpcmmedehhcdeecejknogdbbnqegphpgmjmqnjkkkccjaebhjalbhnqjdialioljmmkailfpidfncepbqihqnfimcebdlldjijqnolkhghlmpmdhglnckbnhgqmnjnakmlpmdnedebacloaabnnohaalnmcoppglqncaqcjjgcokjcpbbgonnihfdjepabaeniphhmpcljnaadbcnpdqbgnabangijkqqhokbpppihpaqcqlnbjjqlklpqlkpemnhafgdecgfodqhjmkgpjqbkkpifqfdfldbijanocjlnmagoqgehecamdjkfbcddhgcqcgqlenjghkbqlnieknfgidefkiilqfkhhcoofgngabdqonphigcomgbadiiplbdcbmmdgqaeqmknomdcmegbdkhlfocenjnngalccadoqfmmohldpdfhciljfjedenmimpegajhlqllhcfjkodonbhpaddbloilhojfchhjokjcjngclpgdkbmkjdmekmiieipadjecdkqgllofmnolgmkkqiblqfgkonaljpadgdddipijqdmkcoibfcmnojhjkemamhkohfimpnhhcoebckncpmnklcnkeabngoljegpplabjcpbpdolbjglhnjblifjockmqpdindipcqafqdelfpjbclkakcppcqodkmhlfafelfpjnfqlkhbecapbbmjmpahaeodceqaimmglnbqhlfbgoalnjhjmkbgfnqjmfogijldbiboccgpgedhhphbblqiloqjnamfenelehhfahqnkdfglfnheidqbjclgnaofgfbfeandnccobgacfqnihpqngmhaojkcdnkkebeqoigjoccadqpaejcqlkigklaohakgmanngfnmjnchbagldgemdolhmikinfmchddepkjjmgipandpoqlcnfjcclqhpajgphhgegdkgemognmhkimjbcngoqbklgfpojdpbneiimkldkmhbjfgdiijhalcbnoebnohkacpccgcekaicaagpeononnfchajenoniqpeipbfadjplehaccqboknjnjjfplbdaongocdlmopibefmcpcddcgfldknfpmhgghfkadlchekcfmckagdmgkhejqdkapaqlijljlflnllcaiegmnjmqhgdepdidhccmipcfidfeigndbkeonakgkoplcqnfbjcdgjqdkoialfiqpgcnhqgaghhpmfpqfmcjbkonedqfqpaflabalhmhfgfeckfpafnlbnkiqoecnkcbdmmciijqjdbbocljqgelgpamdqbnmhbggcfkomhfjanpabckdngiakkdldohmkaoblnppbcboplfhpiiipdfjmcmfgfgqbpomcpmcdohglqemgcncopgkpkncbmjkeebmegbafomnhjfgmkclelahigmljhifmhkgnedcbfnqdbplknkkmhfhboloaigjgcggnoqoopmlfndegoagqemhhqlnfaiepikcqabdnbojpiigiofpgdqlpkhcaglqdlfloiopkijqejkehehgpelkcepnddqaqimjneckbqpediofkbfhjhglqfibmkfncqncieoiabimnbqnbmaqiiepejmggbojinjghhfccpbqkkdljphoabafmohgqqipmhnmjnimkeflhjeankolbihdfbmqfjqqqjqjbjbnfpkijaclmdqngqbplkpkebqopqdmpmmehbcadlpidbpqhcnqlhmdcgeapbgfdndqdeoqccqifhaneegklhngenoehfblmqajcfgldhjekocccndclaccqbpbbfpdelodjmfgdpocdffgleqbjoknlfbnomalaphadbndkbpajdfcekggcqdoqgnlpqdjaeijeiffkeijhcgnnqcemjoonfllhpaipedkoeijkaiknohhkcmdhglfiqdqpannbepdmdlaamhglqcqqfoikboqllccfeohccfpndpkeieofpdgkiceamfqlfmjbjodiefeblbjaecdmpfkndmqpolkaaeiolfhbdpqmngdmomnkjbeokpebglllnoijlmlhmocahabncjaoljamnkhjkhkbecljdkbgdbdkdagbknonnpgdfgcceiqgejclcedkmjpjabfmibcifodhlpmgmlmbqlchbnqmlhnohljnphnilopimpnfifanlickchkecoenkmpoeahmgoiheoakodnqcpmfqqhhepijqqppplpmnjjkpokhnmkdhnjoiebjomniiakqldegqhidjajcnbeinlpmgkdlmohofngppekmklgejiggonqdolaapqmmpdpdccopofpjgjiahkfnqbfchahhmlqokaklqqpelkemljcenihkqddjmnpknogafcfebdkgcdajljnlfgpgmmldldbelajjknmpakpbcilnngpgfmmhjcojoadclqdojekcmaigkpfqjepneeillojajhjfhnokqbngmnaaelllgqnfeendeceekgbqqmlipgiimqimmgbnofonmmpddnnjiqigbbpnicnpkqhgpablfppfllpahoonejbebqbjeheheqoadaiclpqkkkncbofefaieebodcfkikefjjoahmdancidlnapohbjafdmmfagfljjaoqconmmakgccgeoedlkcbinjdmlejhpjflocekbhqdeaijjnpifkephgbmcbmkpejgjafbmiilbnpjdcjmqqhhckahakoggflioebhmdhcompelmjacddgqecpeejeoipigfjdmhgbqpekjefgmehaejfcpnihobjlnebpmpiccnnoejpolqgkahmlnjkfdnodpdhdnmkgeliaknlqlliodhgbllokdopoddbigmeedqhqedjgoblgapciokndleiljifecmofeocnnaplpgbggeohjdhlholhecqacimkmjglcmokfjcpkclkfdpeabafniqmkaenkdqkppjegckcemaohlgkicgpabmpacjlnamlgnfqkfnigfhipmobgqiiglceojadolamkieooochnpinbainjcgdqphfqkkchjpmplklekdgcfcnnepklbjbdjjamjdikalpadkjipdjjeqfkhkiaaefghkoeccnjnakjlfhlmjedojqmjppgaadijfihfhkchjqdqomfolcnklpmndbiphmnompjpnjgqlqedhjqlojpdkakgmogngndmpfmockbbjhbhpnppqqoeboofmhmpbbkqjffoeomlfpggdpngnmcqhggdakpgemhbqgeiigjogqgfipfponpiljofelmedmjjjhhghhaiiklkkhnqnmomnfknlbofjqddjhflkcbabckkooljeilmgfjlbbncdqiggfmhmegmjnmmaibkcqciijgadjbpgkcgeonmmkdbebkhqdfjknpndqqddiceqfmjcodjmeojdehejaklpmmhkkajeaplcfmbiggagcchbfaacegkkeopiqpgldklnbdjgiakqkidihnefffopdopqamcnfqicpmqibhoqgnmlfmlqqjifdckhpnbfjqbnhcflbiqkecnncifkefqhebeiechpgjcimlmgbimqdfincaglbqeheeaiqndfoppenfdelmqoiadhamaqampbmjqlmilqkcijoemphqjmagcqpmhfdgbhalagbqjedjfcaqoennpbgneocjcfliehhkqeambclfadgoiehhphekcdbnagmgflpebikhmcefpbmoahfkqkngeddnqkmekmgifdoeobdnpplqnncikfebdgibhdlpklpbqfgeidjkecgallllhlgbjhqkceifidamqfjenoeiemjdqbbpqpmqpqqbepmbblfjqghpbnhfofnplepobopbaqaqlbiqdopkaohfgqndmlefnkojllpknaibcfbjdhhjlmeipaoqgalbngqqqclqdhjadqmblflqdnhgqeechamjhabfihqqpjakfqkdebmmmhodfjhoijampqiilhaokajkgffkbnmpdqbjqkikkdeinegembpnjqmhqfmdbnemcnapgdhhmcfboidbleajmcpqgjfgkpmmqhkckefjajbnanlkqhlhbnckmbmflkhclhgmfcloojdjolmladbelidcofmeiflklfgbdiigfbfealhdhqbiphjniicqclimjqcdeogmhmlmambgphnpdkdciqpcnalngigdgaahqkqbdcajndaeaqjcanfoqdmbljminjafhkjhfdfncqhoidnpkiomqfidjmgmnoiccjkhlocdqbpqlmgcfgmajpdejbbaemiakhobjmeafnjleoocmipjfhqgqqgfkdaqifklnaaqikpcifnfepqeaqmhlfhglglglkqbdbadpkegqbkdnlmmbpbqnmjecnmbembiqjmhfbdakbmanmhhfijcehdckebnlhgpchapojjgcbmleqlcaiqhpijbfaiqhbmfhqfdemeamqihfojhcobqjgljbldldnbhagpqoeqdkclmcieghocpjoqlqagdajjqhndjgjfinfhcenqqaepogaliijcnmmoelkaihjdkbcipfikhcqjkbedifbjbggmjncnlcodbelekdceillhimjqlfmmlekcnpmgjjmmmcnaanmccfofdgpiincdgnbonghpnajlonkqghkenehfbmcklpgedogejkpjoafbmdkofgehhbpphkcghbheocopkgfchggfhcfdgjdkgekeapejddjoikgandljjnmqjihpfchalahlilmpbfbmopflgjfnmkaibellnlkeeplieeeioiqaibfpcihdjmifipajmdpjccgecjmaohenoobaacndmbjgdbhdqmbfbcmakfopmaqpjdcnbnlbfeaifkkqmkkohpdehjhgnlomqqkddpnclfihjjnnpjiepjinlgfibikdjcjnkchehlnmldkhkhglaickiiebkqbknecnblnbiciagdiqdidjfqaajnkcmcpkbdoikqflilkddqdbcdfollnhlodljbeiglgjnfinhiecloclcggjbghfmqgnmiqbeoqqfjldphndqkooeeajnknqakikekgklggaimniqgjcpohkmeepagepigmcpghgmhdggdbolnidebgajdibcalphcaiqacnkgalhlbojabbneggnagaepmicfflanaibdfppneklcllclmnllhdnmhjegjjnlqlihhcpjchlhmhgnbcdedjbdlmmfjnhkklihbdaehabpceliieekhhoghfjgdfcbiljcdhhijleeqkhggqaelcfapecagohppmiklldglopqadklhdoaidaqhjejjfqfkipbmfmcpajocdiqhkgdncgongqckngdjmglhelkikkfojemfkapkiqkljabnmihoaonpkqbilcmkafinhibkljljddakebbqcbkebkgdodojnmoaihqoinfipeppgglbloaaaeldfhngccjcldplbcjcbdiigkoqlhkeilemhbkodqjnimandahggjqhdblippdhkhaenikcnjbgigcokhepoefdjpnkbjppqnhflijpkpmnjhdigbcpqhmlqbdodbcipqhchqaqkdabckfqajjaoahabomlcmdbmbmbbfqgiqfmdqmecndjpciohdaenffijjqpfqbgiobapnaeomlcifghcilepqgaaqdhjfenegqlgohcppmhelplhlqdqaqpdbhpcccqkikcgmmddlipjnedljkpmpmnpjmnjnqjoegeldgocqagianebjmnqaliapadpbbjneeabjmqjqgoeihlnaqdmibgeeikegehogoqoebblbmmdagnfaghilhlkjbgjjdoqcdkgcljjhdndcbaibjfagmnhkmolanqahjckolnfjkemokmpeqbbgccbcjiqiemmcklobidimiphlqcknnbhlkebqcplnpqqicednfjpnjqphjlfoqkopqgnpfqgoimiagkbiqqcegflkicjcpoqkemllcfkdkljlinepompmegacfgqmbaigafjkljadhecddbnapbhpijlojipdahbfllfamlenhfdbhncdneenmgfagllgebleqfjqdkepogeoodcfnjbfhccpflbgpkiplghagqpemdniojdenjoqmhjopckhidiganiphngeefkihhgbmomedbpphmlhdndflojebiqmgfkibdhijhdgiibeffononbecipfoiidgjbociclkpgiekppfkgkaqpgggjdfpeqipqdjoaqphmhnqmpabpodmifiqnkoelmbhqmbhdcpjiijqjngppacgnopclbqmfcnmcqqpboghqplqhqchnfhggfghihefoaejbeonegojkkobbcnknpmehhbdmglflepfkfkgbmbbnnkcaopbqhnffqbliojgqbjhofijnoqjjpakjmchbmhqdbaloelhilnkcolqhmdppfkckjpjbmnolkbcqbqncpkjnfkbaemqqdhbqpoeqfnmcglpbnbkjbcncdplfhafqqaffenbhegkhamghqanemkjqambneihabpqgpphocoljdecllbkgqnpqajhnhoafmlnldkfhahedqpbebgbmeiidelmbcboobacgadjnbofqigbljfkhnhchhopkahgdhqbangjodlecplhcbollgdqqqeiajpgphemcnnahpdkgdilfogedkpjefkbocbmlbcfmofdfehhhebqmjccflmjgqmhakidohhaagknabkichkfgbqkjhpoilnieqkhkcfpegdliclccdholhfglqqiabfmmpfclgmqmdikeqedchgmgeiefpenkjjobhlndaionoepdnkbnnbfnolklbfbikdnobjkihjqdgejpigcoannaomdpgglofgpmfnigalcgkmjmogfgdimlbicmhkoiodklkbkekoiaapalojojagphfqhofinhhqdlpbocpfiamhnjdjhhdioqmbhbpmaehjeahkehqqkfpgbkmangbnemappngdggoapakfmolhefpcpooajholjhapaghlgqckinhdeogjiefdfddepifinlgnmboffijkhdhkhkjmhpcakopjacanonjbacannoihnpacgmohopfqkobfjcbgaqjneaomhidiplfbjkepcagokepdepemqfalhqabjkgkineelkifkblolpmjkfaickpjeainmgnnmkpoppfqaobcnknknknaqdkahiqalbbdihjqjhoahlphgqcabgkfoammblnlkipbamoapeldjdnpjheqfgjgdjfncdfgdemfeqdfbikmighchomqlkjoccfpmmepaaondjoqcpdcohlqqjgldddolpaojaodhjiiabqadkpmnfeqmaihhkailkljkhqomejdbnqpehjnibpdbllqplpfikmoggpkdoligeqapegmcqliecldnkdhaoecpkmojbolqolclbqnnnhpknqpbplmggpelmpchanqgadbimmehkiicocobahchhfeddlkdqcpcgdjinllnaoecplhlkijkjihbqonefdlnekgcqeiqgnakgqkoilkopibqhdeckndhkipqkfpedccphdfbikjialhiokiolbdimhonkggojogikcifdnjlpbephonpcamfcbfogoeffpojkjaamqpcqphkpjphilchbpjfkaooeqgobcqcqmihbifooqjifmpiekhcojdafcfnpdpaifkcgqbbomjocpkcgqjkeibiioodebnqeffkdqnelpmkmbimiohfgbohpenopjbbbjchjjqekffmpceepapgffqoiknjqaejaimohaahpghpmecholaqakiijkkkcopiopgimqqjgnqeqoolbhbgndonqobjodekbmggeochkfkqmnchamhbognlnfbgehchgbpbkhlcafdqgibblqnmkqqhoqhbghejndneicebgcqpbpjajboacmbqlmnpgjnhheaogldfcckmlafkmacagmlnhockqnihplqddoofiqiomdopiiqikmmmeiieefofegmnmildmniikhqkcgenldadnnefhlkcenghhdahqldbfpbogdojemlkadqqnqjlbiqgldlembdpagiqbabhqqkhfbcacknqndacobjnlcflnaimogqgphmmplfqhqopjnknqgeqiafjhdamniaqpkikqkpfonqmglfahbocjikacnclgflcnehfgijpoiigealeqkkejfgbhoahjqachfglblbndlcefjqkqpnhpmjjlkmpddfaedjbkaoiofofgblhhahdehincfgkaaqlbeibaaqhablbnqpdpipfqcpdokoamcocpnffbqplqnfljqbggbqqfbhphcdephqqibjqmdimeqajgikmafkfblfkdcpgfjkkdqgfejklgfqeeifgaldjhppmjqahmodpakibpcgjkohnfelfdlmgccdlafapgagalekenpapmfegngehlpomqknjjebemflfbmngjilejbqhoghndejhcodpdaelhapkkcnakblabcmoejmaqbomadppfedaqfljefiikfhecqpjhcgjljcbphiefjkoneoaeqfknkjenhkaimbeakcklddocbmhbkemjjkoqicleeckeodjfooiajinqbfplicmdbenjedneeqnmlqjqgoegmidoqefjmhacijcjahqkqinjdnolfiadkgjaqneqgbpkccpkoqackplkfomopidhffjffmfjplkaedkllmlcponmdihnalppbiqpgjohjifkbilemmidelfgmdjedapjmgibqjdfdhnaqiajjacdlnpgeagedeffndocacbbqlhoinjdicolpiaikjokldmpkofkigknppofnkkepopncnfaabcleicoccefamniognmajimbqnqmnmpipepncmokndnpmccjbqglpqnjfpjlgfjokomdqkcfqcmjkehqccqibfcbhehebkhkmmcokkghpkndjkbhljeemhngjaojmpnefplhlniklckablgqjaognaqhcdfcdlggpfhqnhlfdagaljeapgafonhmhfbmfenlpnigmloldfpkgleoajhbijaopaeaqpejdfajfoppeeekkpacmoakphmpaaoknbhdlgaghnjohlihciqfcoqdebhiaghepjffpjmbdmdlokeadnojhmmpgqpdloiapgnkikfqokdjnlpbflfmiojnkqdjmnekdccffffombnikaafiollobggjefoobmnimmbdojkajnpiodhbagjqgifcbkajgmgkcceefbojolibodecehclkekmoqqjpnmngpicdjgeqmbgmjaqkhliibqlkihbkimhfjeebpndlfqfkijimqndbcnocjqbknfanjbmnccbllpmhhnqfaopaacfjmagpeheodqjidakpbijngkjjqcnbmkgnpgiamgkmhiomelafqbmhldqgicendddonqqfelnpqfedghbbkjmnilnjmpjifbekbqbigbqimgcidbokbhncogqiahngpjbhbcdfhkqdbopaanqnbbfalncgmheqbidojloifpmkkechdaikmniccpfenjleagnjnaiahjgckhdijhpnmhqeagfcapgpcdlgiglfaegacefbmningchoefapembjnjhanobbhiachbblocnlmcaebajapiniidhhemjdnimplcplefgpnhegofnfkbooecjgfmqgknmklfddhpjnagobeqolbkfnagiqgemamnjoqjpkkhngdmjckqkenlqnalpjoombgfkkhlqfpplqhnnbaifeinkfaokgkjojemekgnhcffnlmckkeffldqagfkbfdfqlikmfknlpfnlpngjjkjmkkgjpqamjbfkglkqclfgnggopkjnbkbfpqqlckeigamqlqociiqbocfbjkgkabbcnfqlbgimjoecidpobomhaagioqbgnalmpepmdkpqhgihdalbbebbjbbgepjomlbqnnqejdaeedcchlgfcleclgffegiifhbcecamlolgqfilqedmghdkiejahdaomqkncijhkjlndlmfadannmefebqhmdjbjfqfphfhlbaacciollifjbigedkbfacbmiqogboqapimcqamaiofgfokhbnjgbobfghlfbjmkcmpphbpfagdqkbhefalqdpcmcmqkogloggpcocmpjfajqjkaodojiplikkpkdfbkghagpknbafjojgnegqcpjjenkiffmbpcdqddchoiilfapghfnpelebaidbjhqaaqbgbmfgpqeqdmjmnjjfifdfgkoklbeacbfidhqhqldlqkqmnkaggbldbdpeihqdmajoqeqgjeojbhmomhpqomkpoiogqklidkflgfpjbpbdnfjpnaeknqkiqqiflbfqgfhljpefqgclnccgjdiidkmocbkoimikahanoqeadgpgooqikqabdefkmqlfibbadkcjbjlomaoieiqcbbcjhffdijnphenglojamadmccjcfaehhddqmqamlacjgkblmojbmfbaffddcloohegkciqiqjamjaedldifoeehkmclklcihgfkcjenbilfjqmecldiafdqaciihhqldhdolkdlnkciihgdbapdppffhjokbmphjldidkehahkfpiihllpdcaobgppqajjkiddpkniddnmqgbaffpkhqqakeoqcemaaidgdkjcggikqqlgccnhehjmonaqihebdkjbapqhibqkcdipgpcbiqekopdndbqoeglmpoinpnogkhbejgfdhedfhckbkahdnqppoegoaaqjjknggkodpagojepkmdioofqapdkldpakbjifhffnfckebbehekhefiephdoifmkagqeiggnndioiogkmoaqppojkiqhfhfqifjgmkgcgfeeoaacjhiebdlkjgfbbjkdajallgdejpnigjojfaddelnmelbpimoabmqkfejjfpilgpmdjdiifhihgecjqipcmmpoqadjdaencmgmhmfjlgefbgbckhdjphggdopdhqbqqpiqpjjjqanhhaclcbjdiggfgpppmjgahifchkjkneqfhldpmacookceongbolpknlocadidkipodqkoegdkhdjpqmnojlecohblchdebnlfkgcpmjhliekgdcdeqkidoiqcdaqoimdqephlionoackjlaoaniqkpfjeolkdccbjadldfbhgiofqjongojbjekbebgmddeapabmjdfpqemlmidbqapmligijplmkmqnijaimiceakppkjfikakhkebhfnllefaqjmjfngjnogghcnkhkaagqjmbihkbndckalaoqehldiokiqkeijiojfbeflghnodpdlidjjgqjplhcjffambgejmaqmabbdhpkdflkmlkilfjioipbemflqpojqfbopmapeomhjakipgainlqfjhmbmkiicqokhlfpklahndaaagaghfgabjknheedklbqgdklfkahjdkqnlappjnknkcpklnfbqkijqblnkobpgjanphlhjcqmndagjhobnmjhaminngccieghhpbcpcgnnpphllfhiiglefkacpnmloqklhfhhhjqmefjloidncdmfiqkpjcdlbqmojlnblklohembfdekghfddgecbqlnhqciiefgonkbcqjmapbnagnkcmgacocpghlnplbpaclepicingcmepdjoqgjqhimkpjqlqdiaokjkhqgndbqcaqdhhlqgnhghgqffekldhiaafajcanknejbldpnmifdfmkhoqokcihlifqkohjedlgeolcmlqfnkbieomnbqcbgcchfqhglblqcepkcmbcmcggqhjcemdlnbqllebglhfcfhcaqacqfelmngffqlcghaheiimdampdqngcnnjlnhemcoahogbocdgkcbghmjqjgmpfnbephmadkjiclcaihplolofdkkoknkjildnfglfobccpmkpnpkkicdabppninckchmapehlmjniblnjeilmkaceehenllmomjnejeakckjmndamlhfhkbilefplahampnakfmcagnfkaafbhiciadfjlmqqpdfbibmkcchaplfjnqpffcmficjgadkgnbbpanllcoibngijeaoaclldfphlkmjanifojjamidkdgjialfpljbdahoqqaaollmdgpaoggcaemimhelhpdjnniepmedlbefobcoebhjngehqgnecapojkomamqmadnhlgdfinndpqapindkabalamjaambpaofnhiebncamncemhmcodabblfkjgqmhpnebbfgdidmmbciggjoajkncnmnedfeghmhdbclepmpdgkflgiajlahofpmbohhkfqmlhfaifqhqkikqlnghdblgqahgcbqqcqoamqjambdbpbcniqmepgmcnollnlminkmfncjpahkjgbnlmbenahjlmlhdcnkgdpbfgjcmpcpbkpkpfldmoqmfkqlcfkndnhioqlgkanengjdcjhahcpepfbbpeaiangfncnbiiqipjboampejgapjpjbqfgjiaagjfpljmomqclejjmoiiafdomgdffeeacbehhncdidmqjndaflebmdnfpeaooonncebccleedmockfelgl"), ['n'], "Wrong Answer")
